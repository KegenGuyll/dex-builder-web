import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import Navigation from "@/components/Navigation";
import { Providers } from "@/providers";
import { getTokens, Tokens } from "next-firebase-auth-edge";
import { cookies } from "next/headers";
import { clientConfig, serverConfig } from "@/config";
import { filterStandardClaims } from "next-firebase-auth-edge/lib/auth/claims";
import { User } from "@/context/AuthContext";

import { config } from '@fortawesome/fontawesome-svg-core'
import '@fortawesome/fontawesome-svg-core/styles.css'
config.autoAddCss = false

// Import Swiper styles
import "swiper/swiper-bundle.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const toUser = async ({ decodedToken, token }: Tokens): Promise<User> => {
  const {
    uid,
    email,
    picture: photoURL,
    email_verified: emailVerified,
    phone_number: phoneNumber,
    name: displayName,
    source_sign_in_provider: signInProvider,
  } = decodedToken;
 
  const customClaims = filterStandardClaims(decodedToken);

  const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/user/me`, {
    headers: {
      'Authorization': token
    }
  })

  const data = await response.json();
 
  return {
    uid,
    email: email ?? null,
    displayName: displayName ?? null,
    photoURL: photoURL ?? null,
    phoneNumber: phoneNumber ?? null,
    emailVerified: emailVerified ?? false,
    providerId: signInProvider,
    customClaims,
    createdAt: data.createdAt,
    updatedAt: data.updatedAt,
    isPublic: data.isPublic,
    role: data.role,
    username: data.username,
    _id: data._id
  };
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  const tokens = await getTokens(cookies(), {
    apiKey: clientConfig.apiKey,
    cookieName: serverConfig.cookieName,
    cookieSignatureKeys: serverConfig.cookieSignatureKeys,
    serviceAccount: serverConfig.serviceAccount,
  });

  const user = tokens ? await toUser(tokens) : null;

  return (
    <html lang="en">
      <body className={inter.className}>
        <Providers user={user} token={tokens?.token || null}>
          <Navigation />
          <main className="text-foreground bg-background px-4 md:px-8">
            {children}
          </main>
        </Providers>
      </body>
    </html>
  );
}
